# for BWA
rule index:
	input:"{sample}.bam"
	output:"{sample}.bam.bai"
	shell:"samtools index {input}"

## rm MT
rule get_chrlist:
	input:"map/{sample}.sort.bam"
	output:"map_clean/{sample}.chrlist"
	log:"map_clean/{sample}.chrlist.log"
	shell:"samtools view  {input}| awk '{{print $3}}' \
		| sort | uniq -c| grep -E -v 'GL|KI|JH|KB|chrM|\*' |  awk '{{print $2}}' | xargs > {output} 2>{log}"

rule del_MTs:
	input:"map_clean/{sample}.chrlist", "map/{sample}.sort.bam", "map/{sample}.sort.bam.bai"
	output:"map_clean/{sample}.sort.delMT.bam"
	threads: 2
	log:"map_clean/{sample}.sort.delMT.bam.log"
	shell:"samtools view -@ {threads} -bh {input[1]} `cat {input[0]}` > {output} 2>{log}"

# filter by MAPQ:
# 1 需要不需要按MAPQ过滤？需要，下例bowtie2按照>10过滤的。
# 2 三个过滤怎么排序好？不确定
#	 去dup，去线粒体，低质量，未比对上的序列
# 3 怎么设置其他参数?
# https://informatics.fas.harvard.edu/atac-seq-guidelines-old-version.html#alignments
# https://github.com/ENCODE-DCC/atac-seq-pipeline/blob/master/src/encode_task_filter.py
rule rm_low_MAPQ:
	input:"map_clean/{sample}.sort.delMT.bam"
	output:"map_clean/{sample}.sort.delMT.HmapQ.bam"
	threads: 8
	shell:"samtools view -@ {threads} -bh -q 30 {input} > {output}"

# remove duplicate: 这个放最后的优势是，会自动生成bai文件

rule sort2:
	input:"map_clean/{sample}.sort.delMT.HmapQ.bam"
	output:temp("map_clean/{sample}.sort.delMT.HmapQ.Sort2.bam")
	params: tmp="/tmp/{sample}_tmp"
	threads: 2
	log: "map_clean/{sample}.sort.delMT.HmapQ.Sort2.bam.log"
	shell:"samtools sort -@ {threads} -O bam -T {params.tmp} -o {output} {input} >{log} 2>&1"

rule rm_dup:
	input:"map_clean/{sample}.sort.delMT.HmapQ.Sort2.bam"
	output:"map_clean/{sample}.final.bam"
	threads: 8
	params: tmp="map_clean/tmp/{sample}"
	log:"map_clean/{sample}.sort.delMT.HmapQ.sambambaRmDup.bam.log"
	shell:"sambamba markdup -r -t {threads} --tmpdir {params.tmp} {input} {output} >{log} 2>&1"

rule clean_done:
	input: expand("map_clean/{sample}.final.bam", sample=SI)
	output: "map_clean/done.txt"
	params: tmp="map_clean/tmp/"
	shell: "rm -rf {params.tmp} && touch {output}"

